/*
本文件是vs作者一次对udp xjasonlyu/tun2socks中旧方法的 失败的尝试
Packages tun provides utilities for tun.

tun包提供 创建tun设备的方法，以及监听tun，将数据解析为tcp/udp数据的方法。

tun 工作在第三层 IP层上。

我们基本上抄了 xjasonlyu/tun2socks, 因此把GPL证书放在了本包的文件夹中

本来最好是直接import的，但是目前（22.12.18）tun2socks的最新代码还没有打tag，而老代码又不可用，所以只能先复制过来。

windows中,
需要从 https://www.wintun.net/ 下载 wintun.dll 放到vs可执行文件旁边
*/
package tun

import (
	"errors"
	"fmt"
	"io"
	"net"
	"time"

	"github.com/e1732a364fed/v2ray_simple/netLayer"
	"github.com/e1732a364fed/v2ray_simple/netLayer/tun/device"
	"github.com/e1732a364fed/v2ray_simple/netLayer/tun/device/tun"
	"github.com/e1732a364fed/v2ray_simple/netLayer/tun/option"
	"github.com/e1732a364fed/v2ray_simple/utils"
	"gvisor.dev/gvisor/pkg/bufferv2"
	"gvisor.dev/gvisor/pkg/tcpip"
	"gvisor.dev/gvisor/pkg/tcpip/adapters/gonet"
	"gvisor.dev/gvisor/pkg/tcpip/header"
	"gvisor.dev/gvisor/pkg/tcpip/network/ipv4"
	"gvisor.dev/gvisor/pkg/tcpip/network/ipv6"
	"gvisor.dev/gvisor/pkg/tcpip/stack"
	"gvisor.dev/gvisor/pkg/tcpip/transport/icmp"
	"gvisor.dev/gvisor/pkg/tcpip/transport/tcp"
	"gvisor.dev/gvisor/pkg/tcpip/transport/udp"
	"gvisor.dev/gvisor/pkg/waiter"
)

// 若name为空则会返回错误
func Open(name string) (device.Device, error) {
	if name == "" {
		return nil, errors.New("tun: dev name can't be empty")
	}
	return tun.Open(name, uint32(utils.MTU))
}

type StackCloser struct {
	*stack.Stack
}

func (sc *StackCloser) Close() error {
	sc.Stack.Close()
	//sc.Stack.Wait() //这个会卡住; 经测试，不调用它也不影响什么
	return nil
}

// 非阻塞
func Listen(dev device.Device, tcpFunc func(netLayer.TCPRequestInfo), udpFunc func(netLayer.UDPRequestInfo)) (closer io.Closer, err error) {

	s := stack.New(stack.Options{
		NetworkProtocols: []stack.NetworkProtocolFactory{
			ipv4.NewProtocol,
			ipv6.NewProtocol,
		},
		TransportProtocols: []stack.TransportProtocolFactory{
			tcp.NewProtocol,
			udp.NewProtocol,
			icmp.NewProtocol4,
			icmp.NewProtocol6,
		},
	})

	closer = &StackCloser{Stack: s}

	opts := []option.Option{option.WithDefault()}

	for _, opt := range opts {
		if err = opt(s); err != nil {
			return
		}
	}

	nicID := tcpip.NICID(s.UniqueID())

	if ex := s.CreateNICWithOptions(nicID, dev,
		stack.NICOptions{
			Disabled: false,
			// If no queueing discipline was specified
			// provide a stub implementation that just
			// delegates to the lower link endpoint.
			QDisc: nil,
		}); ex != nil {
		err = utils.ErrInErr{ErrDesc: ex.String()}
		return
	}

	const defaultWndSize = 0
	const maxConnAttempts int = 2048

	tcpForwarder := tcp.NewForwarder(s, defaultWndSize, maxConnAttempts, func(r *tcp.ForwarderRequest) {
		var (
			wq  waiter.Queue
			ep  tcpip.Endpoint
			err tcpip.Error
			id  = r.ID()
		)

		// Perform a TCP three-way handshake.
		ep, err = r.CreateEndpoint(&wq)
		if err != nil {
			// RST: prevent potential half-open TCP connection leak.
			r.Complete(true)
			return
		}

		setSocketOptions(s, ep)

		tcpConn := gonet.NewTCPConn(&wq, ep)

		info := netLayer.TCPRequestInfo{
			Conn: tcpConn,

			//比较反直觉
			Target: netLayer.Addr{
				Network: "tcp",
				IP:      net.IP(id.LocalAddress),
				Port:    int(id.LocalPort),
			},
		}

		// log.Printf("forward tcp request %s:%d->%s:%d\n",
		// 	id.RemoteAddress, id.RemotePort, id.LocalAddress, id.LocalPort)

		go tcpFunc(info)

		r.Complete(false)
	})
	s.SetTransportProtocolHandler(tcp.ProtocolNumber, tcpForwarder.HandlePacket)

	udpHandlePacket := func(id stack.TransportEndpointID, pkt stack.PacketBufferPtr) bool {
		// Ref: gVisor pkg/tcpip/transport/udp/endpoint.go HandlePacket

		v := pkt.TransportHeader().View()
		udpHdr := header.UDP(v.AsSlice())
		if int(udpHdr.Length()) > pkt.Data().Size()+header.UDPMinimumSize {
			// Malformed packet.
			s.Stats().UDP.MalformedPacketsReceived.Increment()
			return true
		}

		// if !verifyChecksum(udpHdr, pkt) {
		// 	// Checksum error.
		// 	s.Stats().UDP.ChecksumErrors.Increment()
		// 	return true
		// }

		s.Stats().UDP.PacketsReceived.Increment()

		pd := pkt.Data()

		ad := netLayer.Addr{
			Network: "udp",
			IP:      net.IP(id.LocalAddress),
			Port:    int(id.LocalPort),
		}

		packet := &UdpMsgConn{
			s:          s,
			id:         &id,
			data:       ExtractVV(pd),
			nicID:      pkt.NICID,
			netHdr:     pkt.Network(),
			netProto:   pkt.NetworkProtocolNumber,
			RealTarget: ad,
		}

		info := netLayer.UDPRequestInfo{
			MsgConn: packet,
			Target:  ad,
		}

		go udpFunc(info)
		return true
	}

	// udpForwarder := udp.NewForwarder(s, func(r *udp.ForwarderRequest) {
	// 	var (
	// 		wq waiter.Queue
	// 		id = r.ID()
	// 	)
	// 	ep, err := r.CreateEndpoint(&wq)
	// 	if err != nil {
	// 		log.Printf("tun Err, udp forwarder request %s:%d->%s:%d: %\n",
	// 			id.RemoteAddress, id.RemotePort, id.LocalAddress, id.LocalPort, err)
	// 		return
	// 	}

	// 	udpConn := gonet.NewUDPConn(s, &wq, ep)

	// 	ad := netLayer.Addr{
	// 		Network: "udp",
	// 		IP:      net.IP(id.LocalAddress),
	// 		Port:    int(id.LocalPort),
	// 	}

	// 	info := netLayer.UDPRequestInfo{
	// 		MsgConn: &UdpMsgConn{
	// 			PacketConn: udpConn,
	// 			RealTarget: ad,
	// 		},
	// 		Target: ad,
	// 	}

	// 	go udpFunc(info)
	// })

	s.SetTransportProtocolHandler(udp.ProtocolNumber, udpHandlePacket)

	s.SetPromiscuousMode(nicID, true) //必须调用这个,否则tun什么也收不到
	s.SetSpoofing(nicID, true)

	s.SetRouteTable([]tcpip.Route{
		{
			Destination: header.IPv4EmptySubnet,
			NIC:         nicID,
		},
		{
			Destination: header.IPv6EmptySubnet,
			NIC:         nicID,
		},
	})

	return
}

func ExtractVV(d stack.PacketData) *bufferv2.View {
	return d.AsRange().ToView()
}

func setSocketOptions(s *stack.Stack, ep tcpip.Endpoint) tcpip.Error {
	{ /* TCP keepalive options */
		ep.SocketOptions().SetKeepAlive(true)

		const tcpKeepaliveIdle time.Duration = 60000000000

		idle := tcpip.KeepaliveIdleOption(tcpKeepaliveIdle)
		if err := ep.SetSockOpt(&idle); err != nil {
			return err
		}

		const tcpKeepaliveInterval time.Duration = 30000000000
		interval := tcpip.KeepaliveIntervalOption(tcpKeepaliveInterval)
		if err := ep.SetSockOpt(&interval); err != nil {
			return err
		}

		const tcpKeepaliveCount int = 9
		if err := ep.SetSockOptInt(tcpip.KeepaliveCountOption, tcpKeepaliveCount); err != nil {
			return err
		}
	}
	{ /* TCP recv/send buffer size */
		var ss tcpip.TCPSendBufferSizeRangeOption
		if err := s.TransportProtocolOption(header.TCPProtocolNumber, &ss); err == nil {
			ep.SocketOptions().SetReceiveBufferSize(int64(ss.Default), false)
		}

		var rs tcpip.TCPReceiveBufferSizeRangeOption
		if err := s.TransportProtocolOption(header.TCPProtocolNumber, &rs); err == nil {
			ep.SocketOptions().SetReceiveBufferSize(int64(rs.Default), false)
		}
	}
	return nil
}

// Wraps net.PacketConn and implements MsgConn
type UdpMsgConn struct {
	// net.PacketConn
	RealTarget netLayer.Addr
	netLayer.EasyDeadline

	// tunSrcAddr net.Addr

	s        *stack.Stack
	id       *stack.TransportEndpointID
	data     *bufferv2.View
	nicID    tcpip.NICID
	netHdr   header.Network
	netProto tcpip.NetworkProtocolNumber
}

func (mc *UdpMsgConn) ReadMsg() ([]byte, netLayer.Addr, error) {
	// bs := utils.GetPacket()
	// n, ad, err := mc.ReadFrom(bs)
	// if err != nil {
	// 	return nil, mc.RealTarget, err
	// }
	// mc.tunSrcAddr = ad

	// return bs[:n], mc.RealTarget, nil
	return mc.data.AsSlice(), mc.RealTarget, nil

}

func (p *UdpMsgConn) WriteMsg(b []byte, peera netLayer.Addr) error {
	//v := buffer.View(b)
	// if len(v) > header.UDPMaximumPacketSize {
	// 	// Payload can't possibly fit in a packet.
	// 	e := tcpip.ErrMessageTooLong{}
	// 	return errors.New(e.String())
	// }

	var (
		localAddress tcpip.Address
		localPort    uint16
	)

	ua := peera.ToUDPAddr()

	if ipv4 := ua.IP.To4(); ipv4 != nil {
		localAddress = tcpip.Address(ipv4)
		localPort = uint16(peera.Port)
	} else {
		localAddress = tcpip.Address(peera.IP)
		localPort = uint16(peera.Port)
	}

	route, err := p.s.FindRoute(p.nicID, localAddress, p.netHdr.SourceAddress(), p.netProto, false /* multicastLoop */)
	if err != nil {
		return fmt.Errorf("%#v find route: %s", p.id, err)
	}
	defer route.Release()

	if err = sendUDP(route, bufferv2.MakeWithData(b), localPort, p.id.RemotePort, true); err != nil {
		return fmt.Errorf("%v", err)
	}
	return nil
}
func (mc *UdpMsgConn) CloseConnWithRaddr(raddr netLayer.Addr) error {
	return nil

}
func (mc *UdpMsgConn) Close() error {
	return nil
}
func (mc *UdpMsgConn) Fullcone() bool {
	return true
}

// sendUDP sends a UDP segment via the provided network endpoint and under the
// provided identity.
func sendUDP(r *stack.Route, data bufferv2.Buffer, localPort, remotePort uint16, noChecksum bool) tcpip.Error {
	pkt := stack.NewPacketBuffer(stack.PacketBufferOptions{
		ReserveHeaderBytes: header.UDPMinimumSize + int(r.MaxHeaderLength()),
		Payload:            data,
	})

	// Initialize the UDP header.
	udpHdr := header.UDP(pkt.TransportHeader().Push(header.UDPMinimumSize))
	pkt.TransportProtocolNumber = udp.ProtocolNumber

	length := uint16(pkt.Size())
	udpHdr.Encode(&header.UDPFields{
		SrcPort: localPort,
		DstPort: remotePort,
		Length:  length,
	})

	// Set the checksum field unless TX checksum offload is enabled.
	// On IPv4, UDP checksum is optional, and a zero value indicates the
	// transmitter skipped the checksum generation (RFC768).
	// On IPv6, UDP checksum is not optional (RFC2460 Section 8.1).
	if r.RequiresTXTransportChecksum() &&
		(!noChecksum || r.NetProto() == header.IPv6ProtocolNumber) {
		// xsum := r.PseudoHeaderChecksum(udp.ProtocolNumber, length)

		// vs,_:=data.PullUp(0,1)
		// // for _, v := range vs {
		// // 	xsum = header.Checksum(v, xsum)
		// // }
		// vs.Next()
		// udpHdr.SetChecksum(^udpHdr.CalculateChecksum(xsum))
	}

	ttl := r.DefaultTTL()

	if err := r.WritePacket(stack.NetworkHeaderParams{
		Protocol: udp.ProtocolNumber,
		TTL:      ttl,
		TOS:      0, /* default */
	}, pkt); err != nil {
		r.Stats().UDP.PacketSendErrors.Increment()
		return err
	}

	// Track count of packets sent.
	r.Stats().UDP.PacketsSent.Increment()
	return nil
}
