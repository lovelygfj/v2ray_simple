[[listen]]
protocol = "socks5"
host = "127.0.0.1"
port = 10800


[[dial]]
protocol = "vlesss"
uuid = "a684455c-b14f-11ea-bf0d-42010aaa0003"
host = "127.0.0.1"
port = 4434
version = 0
insecure = true
#utls = false #quic无法使用utls, 没办法
adv = "quic"

#alpn = ["asdfsadf"]    # 如果alpn没指定，则会自动使用 "h3"作为alpn。

# 另外，你若想兼容现有其它 quic 客户端/服务端，你需要配置它们的 alpn 为 h3 或者这里配置的值才行

# 比如 对接 v2ray/xray 时，你要配置 v2ray/xray的 tlsSettings里的 alpn 为 h3 ，才能连上 verysimple 的 quic

# 只要 advancedLayer 设成了quic，network 就会自动被配置为udp，所以不需手动指定udp

# 同时，因为quic的限制，一旦  advancedLayer 设成了quic， 你就必须要保证tls是开启的状态，
#  要不就是在 vless 后面加个s变成 vlesss, 要不就明确指出 tls = true, 这里直接设为 vlesss

# tls = true

# 客户端证书，小白可无视。
#cert = "client.crt"
#key = "client.key" 

# early = true # 0-rtt

# 我们可以选择性使用 “hysteria 阻塞控制” 方法, 但是协议依然为quic协议。具体请参考wiki等github页面上的 本作作者对hysteria的讨论
# 不想用hy阻控的话就注释掉. 
#extra = { congestion_control = "hy", mbps = 3000 } 

# 因为我们不使用hysteria协议头，所以不用单独标注 上行流量和下行流量, 因为我们不与服务端协商。
# 也就是说, 原本的 hysteria协议头 是会去协商 出一个 最低速度 的, 而实际上因为服务端和客户端都是自己配置好的, 
# 我们早知道最低速度了. hy阻控 显然也不适合机场. 而且我们也不使用 hysteria协议头, 所以我们不协商速度, 直接在发送方设置即可. 
#
# 我们这里统一是上行。因为只有发送方 可以控制这个阻塞控制速度的 参数
# 这里我们配置为所在网络最大上传带宽即可.

# 比如我们client.toml里 的 mbps 配置 那就是 【客户端的最大上传速度、服务端的最大下载速度】的最小值，
# server.toml里 的 mbps 配置对我们客户端来说就是 【客户端的最大下载速度、服务端的最大上传速度】的最小值.
